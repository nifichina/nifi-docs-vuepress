(window.webpackJsonp=window.webpackJsonp||[]).push([[7],{215:function(t,s,a){t.exports=a.p+"assets/img/20190413191935357.75cf5488.png"},216:function(t,s,a){t.exports=a.p+"assets/img/20190413193309268.5a1766be.png"},217:function(t,s,a){t.exports=a.p+"assets/img/20190413193839440.332dadd6.png"},218:function(t,s,a){t.exports=a.p+"assets/img/20190415103354861.ce9fcc94.png"},219:function(t,s,a){t.exports=a.p+"assets/img/20190415103652955.41afa4c1.png"},220:function(t,s,a){t.exports=a.p+"assets/img/20190415104129351.eab0fe18.png"},221:function(t,s,a){t.exports=a.p+"assets/img/20190415104633820.365bf0e4.png"},222:function(t,s,a){t.exports=a.p+"assets/img/20190415183538455.32d23a43.png"},223:function(t,s,a){t.exports=a.p+"assets/img/20190415105632199.4db3fbe7.png"},224:function(t,s,a){t.exports=a.p+"assets/img/20190415152129869.63ffadd3.png"},225:function(t,s,a){t.exports=a.p+"assets/img/20190415171515606.8acbd8fe.png"},226:function(t,s,a){t.exports=a.p+"assets/img/20190415182729885.7738c810.png"},227:function(t,s,a){t.exports=a.p+"assets/img/20190415182924232.05589705.png"},228:function(t,s,a){t.exports=a.p+"assets/img/20190415182946528.b7ee7581.png"},229:function(t,s,a){t.exports=a.p+"assets/img/20190415184911446.120a0ee4.png"},230:function(t,s,a){t.exports=a.p+"assets/img/20190416092321649.ee480f84.png"},639:function(t,s,a){"use strict";a.r(s);var n=[function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("div",{staticClass:"content"},[n("h1",{attrs:{id:"json-jolt介绍-及语法详解-shift篇"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#json-jolt介绍-及语法详解-shift篇","aria-hidden":"true"}},[t._v("#")]),t._v(" JSON JOLT介绍 及语法详解-shift篇")]),t._v(" "),n("hr"),t._v(" "),n("p",[t._v("编辑人："),n("strong",[n("strong",[t._v("酷酷的诚")])]),t._v("  邮箱："),n("strong",[t._v("zhangchengk@foxmail.com")])]),t._v(" "),n("hr"),t._v(" "),n("p",[t._v("内容：")]),t._v(" "),n("h2",{attrs:{id:"一-什么是jolt-？"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#一-什么是jolt-？","aria-hidden":"true"}},[t._v("#")]),t._v(" 一 什么是JOLT ？")]),t._v(" "),n("p",[t._v("json与json转换的库，是一个很强大的json转json的工具。在我们涉及Cassandra, ElasticSearch, Mongo的时候，很有可能就有这方面的需求  。另写代码又不灵活，使用JOLT就很好了。")]),t._v(" "),n("p",[t._v("基本流程就是输入格式A数据 json，使用jolt描述语言（也是json ），得到想要的格式B数据json")]),t._v(" "),n("h2",{attrs:{id:"二-jolt的几个理念"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#二-jolt的几个理念","aria-hidden":"true"}},[t._v("#")]),t._v(" 二 JOLT的几个理念")]),t._v(" "),n("p",[t._v("1：对于输入的数据 （或者 数据的节点），它要输出到输出数据的哪个位置？如下：")]),t._v(" "),n("p",[n("img",{attrs:{src:a(215),alt:""}})]),t._v(" "),n("p",[t._v("2：要确定输出的格式 ，你想要什么样格式的输出json？")]),t._v(" "),n("p",[t._v("3：使用 jolt规范语言去描述json转换动作。")]),t._v(" "),n("h2",{attrs:{id:"三-jolt-语法-shift"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#三-jolt-语法-shift","aria-hidden":"true"}},[t._v("#")]),t._v(" 三 jolt 语法  -shift")]),t._v(" "),n("h3",{attrs:{id:"_1-概述"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_1-概述","aria-hidden":"true"}},[t._v("#")]),t._v(" 1 概述")]),t._v(" "),n("p",[t._v("1.1 jolt其实是操作map")]),t._v(" "),n("p",[t._v("1.2 每一个小的转换都是基于一个DSL")]),t._v(" "),n("p",[t._v("1.3 可以把若干个小的转换串（chain ）起来")]),t._v(" "),n("p",[t._v("1.4 基本样式如下：")]),t._v(" "),n("div",{staticClass:"language-json extra-class"},[n("pre",{pre:!0,attrs:{class:"language-json"}},[n("code",[n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token property"}},[t._v('"operation"')]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"shift"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token property"}},[t._v('"spec"')]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" ... "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token property"}},[t._v('"operation"')]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"java"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token property"}},[t._v('"classname"')]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"com.bazaar.."')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token property"}},[t._v('"spec"')]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" ... "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// optional")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token property"}},[t._v('"operation"')]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"default"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token property"}},[t._v('"spec"')]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" ... "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n")])])]),n("p",[t._v('operation  ： "shift","default","remove","sort","java"')]),t._v(" "),n("p",[t._v("1.5 在线转换工具（或者使用NIFI里的转换页面 ）")]),t._v(" "),n("p",[t._v("https://jolt-demo.appspot.com/#modify-stringFunctions")]),t._v(" "),n("p",[t._v("以下示例 皆在以上这个在线工具（可能需要小翻一下）")]),t._v(" "),n("h3",{attrs:{id:"_2-语法讲解"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2-语法讲解","aria-hidden":"true"}},[t._v("#")]),t._v(" 2 语法讲解")]),t._v(" "),n("p",[t._v("以下会以示例为先，在示例中层层递进得讲述jolt的语法规则。")]),t._v(" "),n("p",[t._v("有输入数据，有想要输出数据的格式，那么关键就是这个JOLT SPEC 怎么写（如下图 ）")]),t._v(" "),n("p",[n("img",{attrs:{src:a(216),alt:""}})]),t._v(" "),n("p",[t._v("1 先看正确的写法（如下图）：jolt spec 最简单的理解就是 （前面提过，将json当做map处理）key是“匹配”，value是“去哪”，告诉程序，匹配哪部分数据，这部分数据在输出数据的什么位置 。")]),t._v(" "),n("p",[n("img",{attrs:{src:a(217),alt:""}})]),t._v(" "),n("p",[t._v("2 现在，我们用jolt 去匹配输入数据，并将匹配到的数据发送到输出数据的两个位置：")]),t._v(" "),n("p",[n("img",{attrs:{src:a(218),alt:""}})]),t._v(" "),n("p",[t._v("3 现在，匹配输入数据多个值，发送到输出数据同一个位置：")]),t._v(" "),n("p",[n("img",{attrs:{src:a(219),alt:""}})]),t._v(" "),n("p",[t._v("4：以上 3个示例，匹配数据或者发送数据都是 使用字符串 指明的，下面我们介绍  jolt中的通配符  *   和  &")]),t._v(" "),n("p",[t._v("首先看一个 没有通配符的示例：")]),t._v(" "),n("p",[n("img",{attrs:{src:a(220),alt:""}})]),t._v(" "),n("p",[t._v("再看使用通配符达到与上面这个示例同样的效果：*   &")]),t._v(" "),n("p",[n("img",{attrs:{src:a(221),alt:""}})]),t._v(" "),n("p",[t._v("从示例中可以看出 ，*  是匹配输出数据一个节点下的所有子节点。& 是 匹配 输出数据的key(前面提过，将json当做map处理)，将key当做数据来使用 。")]),t._v(" "),n("p",[t._v("需要注意的一点优先级问题 ，看下面这个示例 ：")]),t._v(" "),n("p",[n("img",{attrs:{src:a(222),alt:""}})]),t._v(" "),n("p",[t._v("通配符的匹配优先级 是在精确 匹配之后的")]),t._v(" "),n("p",[t._v("5 & 的深入理解：&其实是取    *（或其他）  匹配到的节点的 key")]),t._v(" "),n("p",[n("img",{attrs:{src:a(223),alt:""}})]),t._v(" "),n("p",[t._v("接着上面的示例，再对比看一个示例：")]),t._v(" "),n("p",[n("img",{attrs:{src:a(224),alt:""}})]),t._v(" "),n("p",[t._v("在上面示例中，& &(0) &(0,0)都是等价的，拿到的key是：    stats--colour--196--avgRating")]),t._v(" "),n("p",[t._v("&(0,1)   取到的是  第一个通配符  *  匹配到的key值  ：colour")]),t._v(" "),n("p",[t._v("&(0,2)   取到的是  第二个通配符  *  匹配到的key值  ：196")]),t._v(" "),n("p",[t._v("6  $符的使用与理解")]),t._v(" "),n("p",[t._v("在上面的示例与 讲解 中，我们已经 体会到了  &符号   是 如何将匹配到的key值作为data数据使用的")]),t._v(" "),n("p",[t._v("但是，  &   是 在描述数据发送到输出数据 的什么位置上 使用的（即jolt spet 的json脚本中的 value里、冒号右边）")]),t._v(" "),n("p",[t._v("如果，我们需要 在 匹配 输入数据 的时候 有这样的需求呢（即jolt spet 的json脚本中的 key里、冒号左 边）")]),t._v(" "),n("p",[t._v("下面介绍 $，看 示例：")]),t._v(" "),n("p",[n("img",{attrs:{src:a(225),alt:""}})]),t._v(" "),n("p",[t._v("其取值 含义与&基本一样 。")]),t._v(" "),n("p",[n("img",{attrs:{src:a(226),alt:""}})]),t._v(" "),n("p",[t._v("7 @ 符号的理解与使用")]),t._v(" "),n("p",[n("img",{attrs:{src:a(227),alt:""}})]),t._v(" "),n("p",[t._v("@比较难描述 ，对于上面的示例，用下面这个规则去理解。")]),t._v(" "),n("p",[n("img",{attrs:{src:a(228),alt:""}})]),t._v(" "),n("p",[t._v("再举一个$ 与 @  一起使用的例子")]),t._v(" "),n("p",[n("img",{attrs:{src:a(229),alt:""}})]),t._v(" "),n("p",[t._v("同样，@也是可以加数字的，与上面的通配符的加数字用法差不多。")]),t._v(" "),n("p",[n("img",{attrs:{src:a(230),alt:""}})])])}],p=a(0),r=Object(p.a)({},function(){this.$createElement;this._self._c;return this._m(0)},n,!1,null,null,null);s.default=r.exports}}]);